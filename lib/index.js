// Generated by CoffeeScript 2.5.1
//!/usr/bin/env coffee

// 参考资料: [UPNP自动端口映射的实现](https://blog.csdn.net/zfrong/article/details/3305738)
var M_SEARCH, SOAPAction, Udp, UpnpError, _SOAPAction, _control_url, fetch_xml;

import {
  Xml,
  utf8Decode,
  utf8Encode
} from './deps.js';

import local_ip from './local_ip.js';

M_SEARCH = utf8Encode(`M-SEARCH * HTTP/1.1
HOST:239.255.255.250:1900
MAN:"ssdp:discover"
MX:3
ST:urn:schemas-upnp-org:device:InternetGatewayDevice:1`.replace(/\n/g, "\r\n"));

UpnpError = class UpnpError extends Error {
  constructor($) {
    super($.faultstring + " " + $.errorCode + " : " + $.errorDescription);
    this.$ = $;
  }

};

Udp = () => {
  var addr, hostname, port, transport, udp;
  udp = Deno.listenDatagram({
    port: 0,
    transport: "udp",
    hostname: "0.0.0.0"
  });
  ({addr} = udp);
  ({transport, hostname, port} = addr);
  //console.log "#{transport}://#{hostname}:#{port}"
  return udp;
};

fetch_xml = async(url, options = {}) => {
  return Xml((await ((await fetch(url, options))).text()));
};

_SOAPAction = class _SOAPAction {
  constructor(url, serviceType1) {
    this.serviceType = serviceType1;
    this.url = url;
    this.URL = new URL(url);
    this.GetGenericPortMappingEntry = this._("GetGenericPortMappingEntry");
    this.AddPortMapping = this._("AddPortMapping");
  }

  async mapPort(protocol, internal, external, duration = 0, description = "") {
    var hostname, ip, port;
    ({hostname, port} = this.URL);
    ip = (await local_ip(hostname, parseInt(port || 80)));
    return this.AddPortMapping(`<NewRemoteHost></NewRemoteHost><NewExternalPort>${external}</NewExternalPort><NewProtocol>${protocol}</NewProtocol><NewInternalPort>${internal}</NewInternalPort><NewInternalClient>${ip}</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>${description}</NewPortMappingDescription><NewLeaseDuration>${duration}</NewLeaseDuration>`);
  }

  async map() {
    var err, i, li, n, r, ref;
    li = [];
    n = 0;
    while (true) {
      try {
        r = (await this.GetGenericPortMappingEntry(`<NewPortMappingIndex>${n++}</NewPortMappingIndex>`));
      } catch (error1) {
        err = error1;
        if (err.$.errorCode === "713") {
          break;
        }
        throw err;
      }
      r = Xml(r);
      r = r.dict(['NewPortMappingDescription', 'NewProtocol', 'NewInternalClient', 'NewRemoteHost', 'NewInternalPort', 'NewExternalPort', 'NewEnabled', 'NewLeaseDuration']);
      ref = ['NewInternalPort', 'NewExternalPort', 'NewEnabled', 'NewLeaseDuration'];
      for (i of ref) {
        r[i] = parseInt(r[i]);
      }
      li.push(r);
    }
    return li;
  }

  _(action) {
    var body_begin, body_end, headers, response, serviceType, url;
    ({url, serviceType} = this);
    response = `u:${action}Response`;
    headers = {
      "Content-Type": "text/xml",
      SOAPAction: `${serviceType}#${action}`
    };
    body_begin = `<?xml version="1.0"?>
<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:${action} xmlns:u="${serviceType}">`;
    body_end = `</u:${action}></s:Body></s:Envelope>`;
    return async(body) => {
      var error, r, result;
      r = (await fetch_xml(url, {
        method: 'POST',
        headers,
        body: body_begin + body + body_end
      }));
      result = r.one(response);
      if (result === void 0) {
        error = r.one("s:Fault");
        if (error) {
          error = Xml(error).dict(["errorCode", "errorDescription", "faultstring", "faultcode"]);
          throw new UpnpError(error);
        }
      }
      return result;
    };
  }

};

SOAPAction = function() {
  return new _SOAPAction(...arguments);
};

_control_url = async(url) => {
  var URLBase, controlURL, ref, serviceType, x, xml;
  xml = (await fetch_xml(url));
  URLBase = xml.one('URLBase');
  if (!URLBase) {
    url = new URL(url);
    URLBase = url.origin;
  }
  ref = xml.li('service');
  for (x of ref) {
    x = Xml(x);
    serviceType = x.one('serviceType');
    //r = x.dict ['serviceId','serviceType','controlURL']
    if (["urn:schemas-upnp-org:service:WANIPConnection:1", "urn:schemas-upnp-org:service:WANPPPConnection:1"].indexOf(serviceType) + 1) {
      controlURL = URLBase + x.one('controlURL');
      break;
    }
  }
  if (controlURL) {
    return SOAPAction(controlURL, serviceType);
  }
};

export default async() => {
  var i, msg, remote, udp, url;
  udp = Udp();
  udp.send(M_SEARCH, {
    hostname: "239.255.255.250",
    port: 1900,
    transport: "udp"
  });
  [msg, remote] = (await udp.receive(new Uint8Array(1472)));
  msg = utf8Decode(msg);
  msg = msg.replace(/\r/g, '').split("\n");
  for (i of msg) {
    if (i.startsWith("LOCATION:")) {
      url = i.slice(9).trim();
      break;
    }
  }
  if (url) {
    return _control_url(url);
  }
};

//# sourceMappingURL=index.js.map
