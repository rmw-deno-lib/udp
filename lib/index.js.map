{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "..",
  "sources": [
    "src/index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "#!/usr/bin/env coffee\n\n# 参考资料: [UPNP自动端口映射的实现](https://blog.csdn.net/zfrong/article/details/3305738)\n\nimport {Xml,utf8Decode,utf8Encode} from './deps.js'\n\nM_SEARCH = utf8Encode \"\"\"M-SEARCH * HTTP/1.1\nHOST:239.255.255.250:1900\nMAN:\"ssdp:discover\"\nMX:3\nST:urn:schemas-upnp-org:device:InternetGatewayDevice:1\"\"\".replace(/\\n/g, \"\\r\\n\")\n\nclass UpnpError extends Error\n  constructor:($)->\n    super($.faultstring+\" \"+$.errorCode+\" : \"+$.errorDescription)\n    @$=$\n\n\nUdp = =>\n\n  udp = Deno.listenDatagram {\n    port: 0\n    transport: \"udp\"\n    hostname: \"0.0.0.0\"\n  }\n\n  {addr} = udp\n  {transport,hostname,port} = addr\n  #console.log \"#{transport}://#{hostname}:#{port}\"\n  udp\n\n\nfetch_xml = (url, options={})=>\n  Xml await (await fetch(url, options)).text()\n\nexport local_ip = (hostname, port)=>\n  # https://github.com/denoland/deno/issues/10519\n  # Deno.connect not support transport:\"udp\"\n  socket = await Deno.connect({\n    port\n    hostname\n  })\n  socket.close()\n  return socket.localAddr.hostname\n\n\nclass _SOAPAction\n  constructor:(url, @serviceType)->\n    @url = url\n    @URL = new URL(url)\n    @GetGenericPortMappingEntry = @_(\"GetGenericPortMappingEntry\")\n    @AddPortMapping = @_(\"AddPortMapping\")\n\n  mapPort:(protocol,internal,external,duration=0,description=\"\")->\n    {hostname, port} = @URL\n    ip = await local_ip(\n      hostname\n      parseInt(port or 80)\n    )\n    @AddPortMapping \"\"\"<NewRemoteHost></NewRemoteHost><NewExternalPort>#{external}</NewExternalPort><NewProtocol>#{protocol}</NewProtocol><NewInternalPort>#{internal}</NewInternalPort><NewInternalClient>#{ip}</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>#{description}</NewPortMappingDescription><NewLeaseDuration>#{duration}</NewLeaseDuration>\"\"\"\n\n\n  map:->\n    li = []\n    n = 0\n    loop\n      try\n        r = await @GetGenericPortMappingEntry(\"<NewPortMappingIndex>#{n++}</NewPortMappingIndex>\")\n      catch err\n        if err.$.errorCode == \"713\"\n          break\n        throw err\n\n      r = Xml r\n      r = r.dict [\n        'NewPortMappingDescription'\n        'NewProtocol'\n        'NewInternalClient'\n        'NewRemoteHost'\n        'NewInternalPort'\n        'NewExternalPort'\n        'NewEnabled'\n        'NewLeaseDuration'\n      ]\n      for i from [\n        'NewInternalPort'\n        'NewExternalPort'\n        'NewEnabled'\n        'NewLeaseDuration'\n      ]\n        r[i] = parseInt r[i]\n\n      li.push r\n    li\n\n  _:(action)->\n    {url, serviceType} = @\n    response = \"u:#{action}Response\"\n    headers = {\n      \"Content-Type\": \"text/xml\"\n      SOAPAction: \"#{serviceType}##{action}\"\n    }\n    body_begin = \"\"\"<?xml version=\"1.0\"?>\n<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:#{action} xmlns:u=\"#{serviceType}\">\"\"\"\n    body_end = \"\"\"</u:#{action}></s:Body></s:Envelope>\"\"\"\n\n    (body)=>\n      r = await fetch_xml(\n        url\n        {\n          method:'POST'\n          headers\n          body: body_begin+body+body_end\n        }\n      )\n      result = r.one(response)\n      if result == undefined\n        error = r.one(\"s:Fault\")\n        if error\n          error = Xml(error).dict [\n            \"errorCode\",\"errorDescription\",\"faultstring\",\"faultcode\"\n          ]\n          throw new UpnpError(error)\n\n      result\n\n\nSOAPAction = ->\n  new _SOAPAction(...arguments)\n\n_control_url = (url)=>\n  xml = await fetch_xml url\n\n  URLBase = xml.one('URLBase')\n  if not URLBase\n    url = new URL(url)\n    URLBase = url.origin\n\n  for x from xml.li('service')\n    x = Xml x\n\n    serviceType = x.one('serviceType')\n    #r = x.dict ['serviceId','serviceType','controlURL']\n    if [\n      \"urn:schemas-upnp-org:service:WANIPConnection:1\"\n      \"urn:schemas-upnp-org:service:WANPPPConnection:1\"\n    ].indexOf(serviceType) + 1\n      controlURL = URLBase+x.one('controlURL')\n      break\n\n  if controlURL\n    return SOAPAction(controlURL, serviceType)\n\n\n\nexport default =>\n  udp = Udp()\n\n  udp.send(\n    M_SEARCH\n    {\n      hostname:\"239.255.255.250\"\n      port:1900\n      transport:\"udp\"\n    }\n  )\n\n  [msg, remote] = await udp.receive(new Uint8Array(1472))\n\n  msg = utf8Decode msg\n  msg = msg.replace(/\\r/g,'').split(\"\\n\")\n  for i from msg\n    if i.startsWith(\"LOCATION:\")\n      url = i.slice(9).trim()\n      break\n\n  if url\n    return _control_url url\n\n"
  ]
}